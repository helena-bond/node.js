// Generated by CoffeeScript 1.7.1
(function() {
  var Child, Person, bar, characters, foo, goForFlight, guess, launch, man, p, people, person, prepare, result, _i, _j, _len, _len1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  foo = 'bar';

  bar = 'baz';

  guess = 10;

  if (guess === 10) {
    result = 'correct';
  }

  launch = 'go';

  prepare = function(a) {
    if (a == null) {
      a = true;
    }
    return a;
  };

  if (launch === 'go') {
    console.log('go');
  }

  if (launch !== 'go') {
    console.log('not go');
  }

  goForFlight = false;

  if (!goForFlight) {
    console.log('do not go for flight');
  }

  if (!goForFlight) {
    console.log('do not go for flight');
  }

  if (!goForFlight) {
    console.log('do not go for flight');
  }

  if (goForFlight || prepare()) {
    console.log('gone for flight or prepared');
  }

  person = {
    legs: 2,
    hands: 2,
    fingers: 2
  };

  characters = ['Tsunayoshi', 'Hibari', 'Mukuro'];

  for (_i = 0, _len = characters.length; _i < _len; _i++) {
    person = characters[_i];
    console.log('Hi #{person}');
  }

  for (_j = 0, _len1 = characters.length; _j < _len1; _j++) {
    person = characters[_j];
    if (person !== 'Tsunayoshi') {
      console.log(person);
    }
  }

  people = [
    {
      name: 'Jeffrey',
      age: 27
    }, {
      name: 'John',
      age: 13
    }, {
      name: 'Jan',
      age: 42
    }
  ];

  console.log((function() {
    var _k, _len2, _results;
    _results = [];
    for (_k = 0, _len2 = people.length; _k < _len2; _k++) {
      p = people[_k];
      if (p.age >= 21) {
        _results.push(p);
      }
    }
    return _results;
  })());

  Person = (function() {
    function Person(name, age) {
      this.name = name;
      this.age = age;
    }

    Person.prototype.getBirthYear = function() {
      return new Date().getFullYear() - this.age;
    };

    return Person;

  })();

  man = new Person('Jeffrey', 27);

  console.log(man.getBirthYear());

  Child = (function(_super) {
    __extends(Child, _super);

    function Child() {
      return Child.__super__.constructor.apply(this, arguments);
    }

    return Child;

  })(Person);

}).call(this);
